package fn_test

import (
	"testing"

	"github.com/DolkMd/go-dezero/domain/core"
	dz "github.com/DolkMd/go-dezero/domain/core/dezero"
	"github.com/DolkMd/go-dezero/domain/core/dezero/fn"
	"github.com/stretchr/testify/assert"
)

func TestSigmoid(t *testing.T) {
	t.Run("allclose 1", func(t *testing.T) {

		x := core.New2D([][]float64{
			{3.0, 1.0, 2.1},
		})
		y := fn.Sigmoid(dz.AsVariable(x))
		assert.Equal(t,
			core.New1D(0.9525741268224334, 0.7310585786300049, 0.8909031788043871),
			y.Data(),
		)

		// tmp := dz.AsVariable([][]float64{
		// 	{-0.4876293, 0.1325196, 0.41529033},
		// 	{-0.35369408, 0.40186074, 0.21280867},
		// 	{-0.1534916, 0.65276664, 0.02419684},
		// 	{-0.67446584, 0.09670146, 0.45161125},
		// 	{0.0812964, 0.9663623, -0.21846855},
		// 	{-0.253905, 0.5843322, 0.07494485},
		// 	{-0.10627495, 0.7103272, -0.01946722},
		// 	{-0.651532, -0.02925393, 0.54653144},
		// 	{-0.25589913, 0.5190735, 0.12481563},
		// 	{0.00770383, 0.9036036, -0.1667557},
		// 	{-0.5586418, 0.11190338, 0.4356136},
		// 	{-0.7181938, -0.06557725, 0.58181447},
		// 	{-0.17077368, 0.70028764, -0.01142924},
		// 	{-0.1264882, 0.5805208, 0.08134437},
		// 	{0.07761039, 0.95389044, -0.20904753},
		// 	{-0.39124942, 0.38571906, 0.22442889},
		// 	{-0.4132185, 0.20828462, 0.35712528},
		// 	{-0.42879248, 0.20468824, 0.36050326},
		// 	{-0.7286257, -0.06768624, 0.5847696},
		// 	{-0.3014605, 0.42054933, 0.19932808},
		// 	{-0.6152584, 0.1427072, 0.41372058},
		// 	{-0.5128442, 0.15124126, 0.40384695},
		// 	{-0.23439354, 0.554596, 0.09802267},
		// 	{-0.6923171, -0.05186366, 0.56830686},
		// 	{0.15598787, 1.0524665, -0.28919086},
		// 	{0.15802936, 1.0397748, -0.28024024},
		// 	{-0.38493013, 0.3118909, 0.28098348},
		// 	{-0.33458087, 0.37305322, 0.23496565},
		// 	{-0.06364698, 0.7436459, -0.04498982},
		// 	{-0.26813933, 0.50113016, 0.1383209}})
		// t2 := dz.AsVariable([]float64{
		// 	0, 1, 0, 2, 1, 1, 0, 0, 0, 1, 2, 0, 1, 0, 1, 1, 0, 0, 0, 2, 2, 2, 0, 0, 1, 1, 2, 2, 0, 1,
		// })
		// loss := fn.SoftmaxCrossEntropy(tmp, t2)
		// acc := fn.Accuacy(tmp, t2)
		// fmt.Println(loss, acc)
	})
	t.Run("backforward 1", func(t *testing.T) {

		x := core.New2D([][]float64{
			{0, 1, 2},
			{0, 2, 4},
		})
		assert.True(t, gradientCheck(t, fn.Sigmoid, dz.AsVariable(x)))
	})
}
